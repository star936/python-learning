# coding: utf-8


"""
迷宫问题: 给定一个迷宫图，包括图中的一个入口点和一个出口点，要求在途中找到一条从入口到出口的路径。
[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
[1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1],
[1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1],
[1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1],
[1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1],
[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1],
[1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
[1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1],
[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1],
[1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1],
[1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1],
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
其中起点位置为(1, 1);终点位置为(10, 12)
对于点(i, j)而言，其四个相邻位置为上(i-1, j), 下(i+1, j), 左(i, j-1), 右(i, j+1)
为计算(i, j)相邻位置,设置一个而元组的表，其元素是从位置(i, j)得到其四邻位置应该加的数对：
    dirs = [[0, 1], [1, 0], [0, -1], [-1, 0]]
"""


dirs = [[0, 1], [1, 0], [0, -1], [-1, 0]]


def mark(maze, pos):
    """给迷宫maze的位置pos标2表示'到过了'"""
    maze[pos[0]][pos[1]] = 2


def passable(maze, pos):
    """检查迷宫maze的位置pos是否可行"""
    return maze[pos[0]][pos[1]] == 0


def find_path(maze, pos, end):
    """递归查找迷宫路径"""
    mark(maze, pos)
    if pos == end:  # 到达终点
        print(pos, end=',')  # 输出该位置
        return True  # 成功结束
    for i in range(4):  # 按四个方向顺序查找
        # 考虑下一个可能方向
        nextp = pos[0] + dirs[i][0], pos[1] + dirs[i][1]
        if passable(maze, nextp):  # 不可行的相邻位置不管
            if find_path(maze, nextp, end):  # 从nextp可达终点
                print(pos, end=" ")  # 输出该位置
                return True  # 成功结束
    return False
